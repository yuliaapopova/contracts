syntax = "proto3";

package gateway;
option go_package = "github.com/yuliaapopova/contracts/gateway/go;gateway";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "pagination/pagination.proto";
import "account/account_model.proto";
import "auth/auth_model.proto";


// Основной сервис Gateway, объединяющий функциональность auth и account
service Gateway {
    // Аутентификация и авторизация
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/register",
            body: "*"
        };
    }
    
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/login",
            body: "*"
        };
    }
    
    rpc Refresh(RefreshRequest) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/refresh",
            body: "*"
        };
    }
    
    rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/auth/logout",
            body: "*"
        };
    }
    
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/validate",
            body: "*"
        };
    }
    
    // Управление пользователями (требует аутентификации)
    rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/users",
            body: "*"
        };
    }
    
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/{user_id}"
        };
    }
    
    rpc GetCurrentUser(google.protobuf.Empty) returns (GetCurrentUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/users/me"
        };
    }
    
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
            get: "/api/v1/users"
        };
    }
    
    rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/users/{user_id}",
            body: "*"
        };
    }
    
    rpc UpdateCurrentUser(UpdateCurrentUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/v1/users/me",
            body: "*"
        };
    }
    
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/users/{user_id}"
        };
    }
    
    rpc DeleteCurrentUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/users/me"
        };
    }
}

// Запросы для аутентификации
message RegisterRequest {
    account.CreateUser user = 1; // профиль из account
    string password = 2; // пароль как отдельное поле
}

message RegisterResponse {
    account.User user = 1;
    auth.TokenPair tokens = 2;
}

message LoginRequest {
    string login_or_email = 1;
    string password = 2;
}

message LoginResponse {
    account.User user = 1;
    auth.TokenPair tokens = 2;
}

message RefreshRequest {
    string refresh_token = 1;
}

message LogoutRequest {
    string refresh_token = 1;
}

message ValidateTokenRequest {
    string access_token = 1;
}

message ValidateTokenResponse {
    uint64 user_id = 1;
    bool is_valid = 2;
}

// Запросы для управления пользователями
message CreateUserRequest {
    account.CreateUser user = 1;
}

message GetUserRequest {
    uint64 user_id = 1;
}

message GetUserResponse {
    account.User user = 1;
}

message GetCurrentUserResponse {
    account.User user = 1;
}

message GetUsersRequest {
    pagination.Pagination pagination = 1;
}

message GetUsersResponse {
    repeated account.User users = 1;
    pagination.Pagination pagination = 2;
}

message UpdateUserRequest {
    uint64 user_id = 1;
    account.User user = 2;
}

message UpdateCurrentUserRequest {
    account.User user = 1;
}

message DeleteUserRequest {
    uint64 user_id = 1;
}

message RefreshResponse {
    auth.TokenPair token_pair = 1;
}